package KamppistenKotityotAsukkaat;

/**
 * Asukasuettelo, joka voi lis‰t‰ ja poistaa asukkaita.
 * @author Juho Kajanto
 * @version 28.3.2016
 */
public class Asukkaat {
	private static final int MAX_ASUKKAITA = 10;
	private int              lkm           = 0;
	private String           tiedostonNimi = "";
	private Asukas           alkiot[]      = new Asukas[MAX_ASUKKAITA];
	
	/**
	 * Oletusmuodostaja
	 */
	public Asukkaat() {
		//Attribuuttien oma alustus riitt‰‰
	}
	
	/**
	 * Lis‰‰ uuden asukkaan tietorakenteeseen.
	 * @param asukas lis‰tt‰v‰n asukkaan viite
	 * @throws SailoException jos tietorakenne on t‰ynn‰
	 * @example
	 * <pre name="test">
	 * #THROWS SailoException
	 * Asukkaat asukkaat = new Asukkaat();
	 * Asukas as1 = new Asukas(); Asukas as2 = new Asukas();
	 * asukkaat.getLkm() === 0;
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as2);
	 * asukkaat.getLkm() === 2;
	 * asukkaat.lisaa(as1);
	 * asukkaat.getLkm() === 3;
	 * asukkaat.anna(0) === as1;
	 * asukkaat.anna(1) === as2;
	 * asukkaat.anna(2) === as1;
	 * asukkaat.anna(3) === as1; #THROWS IndexOutOfBoundsException
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as1);
	 * asukkaat.getLkm() === 10;
	 * asukkaat.lisaa(as1); #THROWS SailoException
	 * </pre>
	 */
	public void lisaa(Asukas asukas) throws SailoException {
		if (lkm >= alkiot.length) throw new SailoException("Liikaa alkioita!");
		alkiot[lkm] = asukas;
		lkm++;
	}
	
	/**
	 * Poistaa asukkaan tietorakenteesta
	 * @param i poistettavan asukkaan j‰rjestysnumero
	 * @param a_lkm asukkaiden lukum‰r‰
	 * @throws SailoException jos tietorakenne on tyhj‰
	 * @example
	 * <pre name="test">
	 * #THROWS SailoException
	 * Asukkaat asukkaat = new Asukkaat();
	 * Asukas as1 = new Asukas(); Asukas as2 = new Asukas(); Asukas as3 = new Asukas();
	 * asukkaat.getLkm() === 0;
	 * asukkaat.lisaa(as1);
	 * asukkaat.lisaa(as2);
	 * asukkaat.lisaa(as3);
	 * asukkaat.getLkm() === 3;
	 * asukkaat.poista(1, asukkaat.getLkm());
	 * asukkaat.getLkm() === 2;
	 * asukkaat.anna(0) === as1;
	 * asukkaat.anna(1) === as3;
	 * asukkaat.anna(2) === as3; #THROWS IndexOutOfBoundsException
	 * </pre>
	 */
	public void poista(int i, int a_lkm) throws SailoException {
		if (i >= alkiot.length) throw new SailoException("Liian v‰h‰n alkioita!");
		for (int j = i+1; j < a_lkm; j++, i++) {
			alkiot[i] = alkiot[j];
			alkiot[j] = null;
		}
		lkm--;
	}
	
	/**
	 * Palauttaa viitteen haluttuun asukkaaseen
	 * @param i halutun asukkaan j‰rjestysnumero
	 * @return viite i:teen asukkaaseen
	 * @throws IndexOutOfBoundsException jos i laittomalla alueella
	 */
	public Asukas anna(int i) throws IndexOutOfBoundsException {
		if (i < 0 || lkm <= i) throw new IndexOutOfBoundsException("Laiton indeksi: " + i);
		return alkiot[i];
	}
	
	/**
	 * Palauttaa asukkaiden lukum‰‰r‰n
	 * @return asukkaiden lukum‰‰r‰
	 */
	public int getLkm() {
		return lkm;
	}
	
	/**
	 * Lukee asukasluettelon tiedostosta
	 * @param hakemisto tiedoston hakemisto
	 * @throws SailoException jos tiedoston lukeminen ei onnistu
	 */
	public void LueTiedostosta(String hakemisto) throws SailoException {
		tiedostonNimi = hakemisto + "";
		throw new SailoException("Ei osata viel‰ lukea tiedostoa " + tiedostonNimi);
	}
	
	/**
	 * Tallentaa  asukasluettelon tiedostoon
	 * @throws SailoException jos tallentaminen ei onnistu
	 */
	public void tallenna() throws SailoException {
		throw new SailoException("Ei osata viel‰ tallentaa tiedostoa " + tiedostonNimi);
	}
	
	/**
	 * Testiohjelma Asukkaille
	 * @param args ei k‰ytˆss‰
	 */
	public static void main(String[] args) {
		Asukkaat asukkaat = new Asukkaat();
		
		Asukas as1 = new Asukas();
		Asukas as2 = new Asukas();
		Asukas as3 = new Asukas();
		Asukas as4 = new Asukas();
		as1.lisaa();
		as1.vastaaTupu();
		as2.lisaa();
		as2.vastaaTupu();
		as3.lisaa();
		as3.vastaaTupu();
		as4.lisaa();
		as4.vastaaTupu();
		
		try {
			asukkaat.lisaa(as1);
			asukkaat.lisaa(as2);
			asukkaat.lisaa(as3);
			asukkaat.poista(1, asukkaat.getLkm());
			asukkaat.lisaa(as4);
			
			System.out.println("============= J‰senet testi =================");
			
			for(int i = 0; i < asukkaat.getLkm(); i++) {
				Asukas asukas = asukkaat.anna(i);
				System.out.println("Asukkaan numero: " + i);
				asukas.tulosta(System.out);
			}
			
		} catch (SailoException ex) {
			System.out.println(ex.getMessage());
		}
	}
}