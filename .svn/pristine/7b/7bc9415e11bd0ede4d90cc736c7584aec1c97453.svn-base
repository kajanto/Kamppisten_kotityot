package KamppistenKotityotGUI;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;

import java.io.PrintStream;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import KamppistenKotityotAsukkaat.*;
import KamppistenKotityotKamppistenKotityot.*;
import KamppistenKotityotKotityot.*;

import fi.jyu.mit.fxgui.*;


/**
 * Controller tiedosto KamppistenKotityotGUI ohjelmalle.
 * @author Tomi Nyyssönen & Juho Kajanto
 *   juho_kajanto@hotmail.com
 *   toalnyys@student.jyu.fi
 * @version 4.2.2016
 *
 */
public class KamppistenKotityotController implements Initializable {
	
//	private Asukkaat asukkaat = new Asukkaat();
//	private Kotityot ktt = new Kotityot();
	private KamppistenKotityot kamppistenKotityot;
	private ObservableList<Asukas> listdataAsukkaat = FXCollections.observableArrayList();
	private ObservableList<Kotityo> listdataKotityot = FXCollections.observableArrayList();
	private ObservableList<Asukas> listdataSeuraavana = FXCollections.observableArrayList();
    private ObservableList<StringBuilder> listdataEdelliset = FXCollections.observableArrayList();
    private ListView<Asukas> listAsukkaat = new ListView<Asukas>();
    private ListView<Kotityo> listKotityot = new ListView<Kotityo>();
    private ListView<Asukas> listSeuraavana = new ListView<Asukas>();
    private ListView<StringBuilder> listEdelliset = new ListView<StringBuilder>();
	private Asukas asukasKohdalla;
	private Kotityo kotityoKohdalla;
	
	@FXML private ListChooser chooserAsukkaat;
	@FXML private ListChooser chooserKotityot;
    @FXML private ListChooser chooserSeuraavana;
    @FXML private ListChooser chooserEdelliset;
	
	@Override
	public void initialize(URL url, ResourceBundle bundle) {
		alusta();
	}
	
	/**
     * Luokka, jolla hoidellaan miten asukas näytetään listassa 
     */
    public static class CellAsukas extends ListCell<Asukas> {
        @Override protected void updateItem(Asukas item, boolean empty) {
            super.updateItem(item, empty); // ilman tätä ei näy valinta
            setText(empty ? "" : item.getNimi());
        }
    }
    
    
    /**
     * Luokka, jolla hoidellaan miten kotityö näytetään listassa 
     */
    public static class CellKotityo extends ListCell<Kotityo> {
        @Override protected void updateItem(Kotityo item, boolean empty) {
            super.updateItem(item, empty); // ilman tätä ei näy valinta
            setText(empty ? "" : item.getNimi());
        }
    }    
    
    @FXML private void handleLisaaAsukas() {
        lisaaAsukas();
        try {
			kamppistenKotityot.talleta();
		} catch (SailoException e) {
			Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + e.getMessage());
		}
    }

    @FXML private void handleLisaaKotityo() {
        lisaaKotityo();
        try {
			kamppistenKotityot.talleta();
		} catch (SailoException e) {
			Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + e.getMessage());
		}
    }

    @FXML private void handleMerkitseTehdyksi() {
        merkitseTehdyksi();
        try {
			kamppistenKotityot.talleta();
		} catch (SailoException e) {
			Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + e.getMessage());
		}
    }

    @FXML private void handleMerkitseTekijaksi() {
        merkitseTekijaksi();
        try {
			kamppistenKotityot.talleta();
		} catch (SailoException e) {
			Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + e.getMessage());
		}
    }

    @FXML private void handlePoistaAsukas() throws SailoException {
        poistaAsukas();
        try {
			kamppistenKotityot.talleta();
		} catch (SailoException e) {
			Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + e.getMessage());
		}
    }

    @FXML private void handlePoistaKotityo() {
        poistaKotityo();
        try {
			kamppistenKotityot.talleta();
		} catch (SailoException e) {
			Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + e.getMessage());
		}
    }
    
    

    @FXML private void handleNaytaAsukkaanKotityot() {
        NaytaAsukkaanKotityotController nAKCtrl = NaytaAsukkaanKotityotController.tulosta(null);
        tulostaValittu(nAKCtrl.getTextArea());
    }
    
    
    /**
     * Alustetaan pääikkuna
     */
    protected void alusta() {
        BorderPane parentAs = (BorderPane)chooserAsukkaat.getParent();
        parentAs.setCenter(listAsukkaat);
        GridPane parentKtGrid = (GridPane)chooserKotityot.getParent();
        parentKtGrid.add(listKotityot,0,1);
        parentKtGrid.add(listSeuraavana,1,1);
        parentKtGrid.add(listEdelliset,2,1);
        listAsukkaat.setCellFactory( p -> new ListCell<Asukas>() {
            @Override protected void updateItem(Asukas item, boolean empty) {
                super.updateItem(item, empty); 
                setText(empty ? "" : item.getNimi());
            }
        });
        listKotityot.setCellFactory( q -> new ListCell<Kotityo>() {
            @Override protected void updateItem(Kotityo item, boolean empty) {
                super.updateItem(item, empty); 
                setText(empty ? "" : item.getNimi());
            }
        });
        listSeuraavana.setCellFactory( p -> new ListCell<Asukas>() {
            @Override protected void updateItem(Asukas item, boolean empty) {
                super.updateItem(item, empty); 
                setText(empty ? "" : item.getNimi());
            }
        });
        listEdelliset.setCellFactory( p -> new ListCell<StringBuilder>() {
            @Override protected void updateItem(StringBuilder item, boolean empty) {
                super.updateItem(item, empty);
                setText(empty ? "" : item.toString());
            }
        });
    }

    
    /**
     * @param kampKot käytettävä kämppisten kotityö
     */
    public void setKamppistenKotityot(KamppistenKotityot kampKot) {
    	this.kamppistenKotityot = kampKot;
    }
    
    
    /**
     * @param nimi tiedosto josta tiedot luetaan
     * @return jos onnistuu, muuten tulostetaan virhe.
     */
    protected String lueTiedosto(String nimi) {
    	try {
    		kamppistenKotityot.lueTiedosto(nimi);
    		haeAsukas(0);
    		haeKotityo(0);
    		haeSeuraavanaTiedostosta();
    		haeEdelliset();
    		return null;
    	} catch (SailoException e) {
    		String virhe = e.getMessage();
    		if (virhe != null) Dialogs.showMessageDialog(virhe);
    		return virhe;
    	}
    }
    
    
    /**
     * Avaa ikkunan asukkaan lisäämiseksi.
     */
    protected void lisaaAsukas() {
        String lisaaAsukas = Dialogs.showInputDialog("Lisättävän asukkaan nimi", "");
        if (lisaaAsukas == null) return;
        Asukas uusi = new Asukas();
        uusi.lisaaId();
        uusi.setNimi(lisaaAsukas);
        try {
        	kamppistenKotityot.lisaaAsukas(uusi);
        }
        catch (SailoException e) {
        	Dialogs.showMessageDialog("Ongelmia uuden luomisessa " + e.getMessage());
        	return;
        }
        haeAsukas(uusi.getId());
    }
    
    
    /**
     * Avaa ikkunan kotityön lisäämiseksi.
     */
    protected void lisaaKotityo() {
        String lisaaKotityo = Dialogs.showInputDialog("Lisättävä kotityo", "");
        if (lisaaKotityo == null) return;
        Kotityo kt = new Kotityo(lisaaKotityo);
        kamppistenKotityot.lisaaKotityo(kt);
        haeKotityo(kt.getId());
    }
    
    
    /**
     * Siirtää valitun työn edellisiin kertoihin ja siirtää edellisillä kerroilla 
     * tehtyjä töitä yhden taaksepäin.
     */
    private void merkitseTehdyksi() {
    	kotityoKohdalla = listKotityot.getSelectionModel().getSelectedItem();
    	if (kotityoKohdalla == null || kotityoKohdalla.getSeuraavanaVuorossa() == -1) return;
    	kamppistenKotityot.asetaTehdyksi(kotityoKohdalla);
    	haeSeuraavanaTiedostosta();
    	haeEdelliset();
    }

    
    /**
     * Merkitsee valitun asukkaan valitun kotityön tekijäksi.
     */
    private void merkitseTekijaksi() {
        asukasKohdalla = listAsukkaat.getSelectionModel().getSelectedItem();
        kotityoKohdalla = listKotityot.getSelectionModel().getSelectedItem();
        if (asukasKohdalla == null || kotityoKohdalla == null) return;
        kamppistenKotityot.asetaTekija(asukasKohdalla, kotityoKohdalla);
        haeSeuraavana(asukasKohdalla.getId(), kotityoKohdalla.getId());
    }
    
    
    /**
     * Avaa ikkunan valitun asukkaan poiston varmistamiseksi. 
     * @throws SailoException 
     */
    private void poistaAsukas() throws SailoException {
    	asukasKohdalla = listAsukkaat.getSelectionModel().getSelectedItem();
    	if (asukasKohdalla == null) return;
    	boolean vastaus = Dialogs.showQuestionDialog("Poiston varmennus",
                "Haluatko varmasti poistaa asukkaan " + asukasKohdalla.getNimi(), "Kyllä", "Peruuta");
        if (vastaus) 
        	kamppistenKotityot.poistaAsukas(asukasKohdalla);
        List<Kotityo> kotityot = kamppistenKotityot.annaKotityot(); 
        for (int i = 0; i<kotityot.size(); i++) {
        	if (kotityot.get(i).getSeuraavanaVuorossa() == asukasKohdalla.getId()) kotityot.get(i).setSeuraavanaVuorossa(-1);
        	if (kotityot.get(i).getEdellinenKerta() == asukasKohdalla.getId()) kotityot.get(i).setEdellinenKerta(-1);
        	if (kotityot.get(i).getSitaEdeltava() == asukasKohdalla.getId()) kotityot.get(i).setSitaEdeltava(-1);
        	if (kotityot.get(i).getToistaEdeltava() == asukasKohdalla.getId()) kotityot.get(i).setToistaEdeltava(-1);
        }
        haeAsukas(0);
    	haeSeuraavanaTiedostosta();
    	haeEdelliset();
    }
    
    
    /**
     * Avaa ikkunan valitun kotityön poiston varmistamiseksi.
     */
    private void poistaKotityo() {
    	kotityoKohdalla = listKotityot.getSelectionModel().getSelectedItem();
    	if (kotityoKohdalla == null) return;
    	boolean vastaus = Dialogs.showQuestionDialog("Poiston varmennus",
                "Haluatko varmasti poistaa kotityön " + kotityoKohdalla.getNimi(), "Kyllä", "Peruuta");
        if (vastaus)
        	kamppistenKotityot.poistaKotityo(kotityoKohdalla);
        haeKotityo(0);
        haeSeuraavanaTiedostosta();
        haeEdelliset();
    }
    
    /**
     * Hakee asukkaan tiedot listaan
     * @param id asukkaan viitenumero
     */
    protected void haeAsukas(int id) {
    	listdataAsukkaat.clear();
    	listAsukkaat.setItems(listdataAsukkaat);
    	
    	int index = 0;
    	for (int i = 0; i < kamppistenKotityot.getAsukkaita(); i++) {
    		Asukas asukas = kamppistenKotityot.annaAsukas(i);
    		if (asukas.getId() == id) index = i;
    		listdataAsukkaat.add(asukas);
    	}
    	listAsukkaat.getSelectionModel().select(index);
    }
    
    
    /**
     * Hakee seuraavana vuorossa olevan asukkaan tiedot listaan seuraavanaVuorossa
     * @param idAsukas asukkaan viitenumero
     * @param idKotityo kotityon viitenumero
     */
    protected void haeSeuraavana(int idAsukas, int idKotityo) {
    	listSeuraavana.setItems(listdataSeuraavana);
        
        for (int i = 0; i<kamppistenKotityot.getKotitoita(); i++) {
            if (kamppistenKotityot.getKotitoita() > listdataSeuraavana.size()) {
                Asukas apu = new Asukas();
                listdataSeuraavana.add(apu);
            }
            if (kamppistenKotityot.moneskoKotityo(idKotityo) == i) {
            	try {
					listdataSeuraavana.set(i, kamppistenKotityot.annaAsukas(
							kamppistenKotityot.etsiAsukkaanPaikka(idAsukas)));
				} catch (IndexOutOfBoundsException e) {
					Dialogs.showMessageDialog(e.getMessage());
				} catch (SailoException e) {
					Dialogs.showMessageDialog("Asukasta ei löydy! " + e.getMessage());
				}
            }
        }        
    }    
    
    
    /**
     * Hakee kotityön listaan
     * @param id kotityön id
     */
    protected void haeKotityo(int id) {
        listdataKotityot.clear();
        listKotityot.setItems(listdataKotityot);
        
        int index = 0;
        for ( int i = 0; i < kamppistenKotityot.getKotitoita(); i++) {
            Kotityo kt = kamppistenKotityot.annaKotityot().get(i);
            if (kt.getId() == id) index = i;
            listdataKotityot.add(kt);
        }
        listKotityot.getSelectionModel().select(index);
    }
    
    
    /**
     * Hakee edelliset tekijät listaan
     */
    protected void haeEdelliset() {
    	listdataEdelliset.clear();
    	listEdelliset.setItems(listdataEdelliset);
    
    	for (int i = 0; i<kamppistenKotityot.getKotitoita(); i++) {
    		Kotityo kt = kamppistenKotityot.annaKotityot().get(i);
    		StringBuilder nimet;
    		String nimi1 = "";
    		String nimi2 = "";
    		String nimi3 = "";
			try {
				nimi1 = kamppistenKotityot.annaAsukas(
	    				kamppistenKotityot.etsiAsukkaanPaikka(
						kt.getEdellinenKerta())).getNimi();
			} catch (IndexOutOfBoundsException e) {
				Dialogs.showMessageDialog(e.getMessage());
			} catch (SailoException e) {
				nimi1 = "";
			} 
			
			try {
				nimi2 = kamppistenKotityot.annaAsukas(
	    				kamppistenKotityot.etsiAsukkaanPaikka(
						kt.getSitaEdeltava())).getNimi();
			} catch (IndexOutOfBoundsException e) {
				Dialogs.showMessageDialog(e.getMessage());
			} catch (SailoException e) {
				nimi2 = "";
			}
			
			try {
				nimi3 = kamppistenKotityot.annaAsukas(
	    				kamppistenKotityot.etsiAsukkaanPaikka(
						kt.getToistaEdeltava())).getNimi();
			} catch (IndexOutOfBoundsException e) {
				Dialogs.showMessageDialog(e.getMessage());
			} catch (SailoException e) {
				nimi3 = "";
			}
			nimet = new StringBuilder(nimi1 + "    " + nimi2 + "    " + nimi3);
			listdataEdelliset.add(nimet);
		}
    }
    
    
    /**
     * Hakee seuraavat tekijät listaan ohjelmaa käynnistettäessä
     */
    protected void haeSeuraavanaTiedostosta() {
    	listdataSeuraavana.clear();
    	int x;
    	int ktId = kamppistenKotityot.kotityonId(0);
    	for(int i = ktId; i < ktId + kamppistenKotityot.getKotitoita(); i++) {
    		try {
				x = kamppistenKotityot.annaKotityo(i).getSeuraavanaVuorossa();
				if ( x > 0 )
	    			haeSeuraavana(x,i);
					
			} catch (SailoException e) {
				Dialogs.showMessageDialog("Kotityötä ei löydy! " + e.getMessage());
			}
    	}
    }
    
    
    /**
     * Tulostaa asukkaalle määritetyt kotityöt tekstialueeseen
     * @param text alue johon tulostetaan
     */
    public void tulostaValittu(TextArea text) {
        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(text)) {
            asukasKohdalla = listAsukkaat.getSelectionModel().getSelectedItem();
            os.println("Asukkaan " + asukasKohdalla.getNimi() + " kotityöt ");
            os.println("-------------------------------------------------");
            for (Kotityo kt:listdataKotityot) {
                if (kt.getSeuraavanaVuorossa() == asukasKohdalla.getId()) {
                    os.println(kt.getNimi());
                }
            }
        }
    }
}			